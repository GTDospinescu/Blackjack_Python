import random

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}

playing = True

class Card:
    
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank
    
    def __str__(self):
        return self.rank + " of " + self.suit
    
class Deck:
    
    def __init__(self):
        self.deck = []  # start with an empty list
        for suit in suits:
            for rank in ranks:
                created_card = Card(suit,rank)
                self.deck.append(created_card)
    
    def __str__(self):
        print_result = ""
        for card in self.deck:
            print_result = print_result + card.suit + ' ' + card.rank + "\n"
        return print_result

    def shuffle(self):
        random.shuffle(self.deck)
        
    def deal(self):
        return self.deck.pop()
    
class Hand:
    
    def __init__(self):
        self.cards = []  # start with an empty list as we did in the Deck class
        self.value = 0   # start with zero value
        self.aces = 0    # add an attribute to keep track of aces
    
    def add_card(self,card):
        self.cards.append(card)
        self.value += values[card.rank]
        if card.rank == "Ace":
            self.aces += 1
    
    def adjust_for_ace(self):
        while self.value > 21 and self.aces > 0:
            self.value -= 10
            self.aces -= 1

            
class Chips:
    
    def __init__(self):
        self.total = 100  # This can be set to a default value or supplied by a user input
        self.bet = 0
        
    def win_bet(self):
        self.total = self.total + self.bet
    
    def lose_bet(self):
        self.total = self.total - self.bet            
        
def take_bet(chips):
    
    while True:
        try:
            user_bet = int(input("Please place your bet! "))
        except:
            print("Please provide a number")
        else:
            if user_bet > chips.total:
                print("You do not have enough Chips to place the bet, try again! You have {}".format(chips.total))
            else:
                chips.bet = user_bet
                break

                
def hit(deck,hand):
    
    single_card = deck.deal()
    hand.add_card(single_card)
    hand.adjust_for_ace()
    
    
    
def hit_or_stand(deck,hand):
    
    while True:
        player_choice = input("Hit or Stand? Please press h or s")
        if  player_choice == "h":
            hit(deck,hand)
            return True
        elif player_choice == "s":
            print("Player stands, now it is Dealer's turn! ")
            playing = False
            return False
        else:
            print("Your input incorrect! Please write h or s! ")
    
    
def show_some(player, dealer):
    
    print("\nDealer's hand")
    print("First card is hidden")
    print(dealer.cards[1])
    
    print("\nPlayer's hand")
    for card in player.cards:
        print(card)
    print(f"Value of Player's hand is {player.value}")
        
        
def show_all(player, dealer):
    
    print("\nDealer's hand: ")
    for card in dealer.cards:
        print(card)
    print(f"Value of Dealer's hand is {dealer.value}")   
        
    print("\nPlayer's hand: ")
    for card in player.cards:
        print(card)
    print(f"Value of Player's hand is {player.value}")
          
          
def player_busts(player, dealer, chips):
    print("Player busts!")
    chips.lose_bet()

def player_wins(player,dealer,chips):
    print("Player wins!")
    chips.win_bet()
    
def dealer_busts(player,dealer,chips):
    print("Player wins!")
    chips.win_bet()
    
def dealer_wins(player,dealer,chips):
    print("Player busts!")
    chips.lose_bet()
    
def push():
    print("It's a tie!")        
    
    
    
print("Welcome to Blackjack!")


player_chips = Chips()
print("\nPlayer's total chips {}".format(player_chips.total))

while playing:
    
    deck = Deck()
    deck.shuffle()
    
    player_hand = Hand()
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())
    
    dealer_hand = Hand()
    dealer_hand.add_card(deck.deal())
    dealer_hand.add_card(deck.deal())
    
    take_bet(player_chips)
    show_some(player_hand, dealer_hand)
    
    round_finished = False
    while True:
        if player_hand.value == 21:
            player_wins(player_hand ,dealer_hand, player_chips)
            round_finished = True
            break
        
        player_active = hit_or_stand(deck, player_hand)
        
        if player_active:
            show_some(player_hand, dealer_hand)
        else:
            break
        
        if player_hand.value > 21:
            player_busts(player_hand, dealer_hand, player_chips)
            round_finished = True
            break
            
    
    if round_finished == False:
        
        while dealer_hand.value  < 17:
            hit(deck, dealer_hand)
                
        show_all(player_hand, dealer_hand)
        
        if dealer_hand.value > 21:
            dealer_busts(player_hand ,dealer_hand, player_chips)
        elif dealer_hand.value > player_hand.value:
            dealer_wins(player_hand ,dealer_hand, player_chips)
        elif dealer_hand.value < player_hand.value:
            player_wins(player_hand ,dealer_hand, player_chips)
        else:
            push()
    
    
    print("\nPlayer's total chips {}".format(player_chips.total))
    if player_chips.total <= 0:
        break
        